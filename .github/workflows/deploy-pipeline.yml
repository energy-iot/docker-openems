name: Deploy Pipeline

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  IMAGE_NAME_VALUE: openems
  IMAGE_TAG_VALUE: latest

jobs:
  # Configure AWS credentials 
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  # Create ECR repository
  create_ecr_repository:
    name: Create ECR repository
    needs: 
      - configure_aws_credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if ECR repository exists
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME_VALUE }}
        run: |
          result=$(aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME }}" | jq -r '.repositories[0].repositoryName')
          echo "repo_name=$result" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create ECR repository
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME_VALUE }}
        if: env.repo_name != env.IMAGE_NAME
        run: |
          aws ecr create-repository --repository-name ${{ env.IMAGE_NAME }} 

# Build Docker Image

  build_and_push_image:
    name: Build and push Docker image to ECR
    needs:
      - configure_aws_credentials
      - create_ecr_repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        working-directory: ./openems-backend
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME_VALUE }}
          IMAGE_TAG: ${{ env.IMAGE_TAG_VALUE }}
        run: |
          docker buildx build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Retag Docker image
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME_VALUE }}
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker Image to Amazon ECR
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME_VALUE }}
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}


