name: Deploy Pipeline

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  IMAGE_NAME_VALUE_1: openems-ui
  IMAGE_NAME_VALUE_2: openems-backend
  IMAGE_NAME_VALUE_3: openems-db
  IMAGE_NAME_VALUE_4: odoo
  IMAGE_NAME_VALUE_5: odoo-db
  IMAGE_TAG_VALUE: latest
  TERRAFORM_ACTION: destroy

jobs:
  # Configure AWS credentials 
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
   # Build AWS infrastructure
  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Run Terraform initialize
        working-directory: ./iac
        run: terraform init

      - name: Run Terraform apply/destroy
        working-directory: ./iac
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve        

  # Create ECR repository
  create_ecr_repository:
    name: Create ECR repository
    needs: 
      - deploy_aws_infrastructure     
      - configure_aws_credentials
    if: needs.deploy_aws_infrastructure.output.terraform_action != 'destroy'  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if ECR repositories exist
        env:
          # List your repository names here  
          REPO_NAMES: '${{ env.IMAGE_NAME_VALUE_1 }},${{ env.IMAGE_NAME_VALUE_2 }},${{ env.IMAGE_NAME_VALUE_3 }},${{ env.IMAGE_NAME_VALUE_4 }},${{ env.IMAGE_NAME_VALUE_5 }}' 
        run: |
          IFS=',' read -ra REPOS <<< "$REPO_NAMES"
          for repo in "${REPOS[@]}"; do
            echo "Checking repository: $repo"
            result=$(aws ecr describe-repositories --repository-names "$repo" 2>/dev/null | jq -r '.repositories[0]?.repositoryName // empty')
            if [[ -z "$result" ]]; then
              echo "Repository $repo does not exist."
            else
              echo "Repository $repo exists."
              echo "repo_name_$repo=$result" >> $GITHUB_ENV
            fi
          done
        continue-on-error: true

      - name: Create ECR repositories
        env:
          # List your repository names here  
          REPO_NAMES: '${{ env.IMAGE_NAME_VALUE_1 }},${{ env.IMAGE_NAME_VALUE_2 }},${{ env.IMAGE_NAME_VALUE_3 }},${{ env.IMAGE_NAME_VALUE_4 }},${{ env.IMAGE_NAME_VALUE_5 }}' 
        run: |
          IFS=',' read -ra REPOS <<< "$REPO_NAMES"
          for repo in "${REPOS[@]}"; do
            echo "Creating repository: $repo"
            if ! aws ecr describe-repositories --repository-names "$repo" 2>/dev/null; then
              aws ecr create-repository --repository-name "$repo"
              echo "Repository $repo created."
            else
              echo "Repository $repo already exists."
            fi
          done
        #  aws ecr put-registry-scanning-configuration \
        #     --scan-type ENHANCED \
        #      --rules '["scanFrequency" : "SCAN_ON_PUSH"]' \
        #      --region ${{ env.AWS_REGION }}
      
    # Build Docker Image

  build_and_push_image:
    name: Build, Scan and push Docker image to ECR
    needs:  
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
    if: needs.deploy_aws_infrastructure.output.terraform_action != 'destroy'  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: install Trivy
      - run: |
           sudo apt-get install wget apt-transport-https gnupg lsb-release -y
           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
           echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
           sudo apt-get update
           sudo apt-get install trivy -y
           trivy fs . 

      - name: Build Docker image
        run: |
          docker-compose build      
         
      



